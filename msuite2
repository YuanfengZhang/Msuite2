#!/usr/bin/perl
#
# Author : Kun Sun (sunkun@szbl.ac.cn)
# Date   : Aug 2022
# Version: 2.2.0
#
# This is the main program of Msuite2.
# It will interpret the parameters, prepare data and write makefile.
#
# Msuite2 is freely available at https://github.com/hellosunking/Msuite2/
#

use strict;
use warnings;
use Getopt::Long;
use Cwd;
use File::Basename;
use FindBin;
use lib "$FindBin::RealBin/bin";
use MsuiteUtil qw/$version $ver usage check_index check_dependency detect_cycle mk_samheader makefile_methcall printRed printGrn printYlw makefile_perchr_v2/;

## v2.2.2
## add "--skip-bam" option to skip bam file generation
## v2.2.1
## fix a bug in size plot after cut-head
## optimization on spike-in report
## optimize m-bias plot
## v2.2
## support "keep-dup" option
## add a utility to convert BAM result to BED format
## only check cut-paramters in PE-mode
##
## v2.1.1
## in plot.fqstat, add polygen for cut-head and cut-tail
## in plot.size, add the cut ones to the overall size
##
## v2.1
## report lambda reads in a separated file
## and revise the statistics table
## move the XG:Z:CT/GA tag to the end of each record

## running environment
my $Msuite2= $FindBin::RealBin;
my $bin    = "$Msuite2/bin";
my $cwd    = cwd();

## parameters
our ($read1, $cycle, $index, $outdir, $read2, $readU) =
    ('',     0,      '',     ''     , ''    , ''    );
our ($mode3, $mode4, $protocol, $kit,       $thread, $phred33, $phred64, $minscore, $minsize) =
    (0,      0,      'BS',      'illumina', 0,       0,        0,        20,      , 36      );
our ($cuthead_r1, $cuttail_r1, $cuthead_r2, $cuttail_r2) =
    (0,           0,           0,           0          );
our ($minins, $maxins, $call_CpH, $alignonly, $keepdup, $skipBam) =
    (0,       1000,    0,         0,          0       ,        0);
our $aligner = "bowtie2";
our $alignmode;	## 3-/4- letter
our $pe       = '';	## flag to indicate PE data
our $help     = 0;
our $showVer  = 0;
our (@file1s, @file2s);
our $seqMode;	## SE or PE
our $reads;

GetOptions(
	"1:s"  => \$read1,
	"x:s"  => \$index,
	"o:s"  => \$outdir,
	"c:i"  => \$cycle,
	"U:s"  => \$readU,

	"2:s"  => \$read2,
	"3"    => \$mode3,
	"4"    => \$mode4,
	"m:s"  => \$protocol,
	"k:s"  => \$kit,
	"p:i"  => \$thread,
	"q:i"  => \$minscore,
	"phred33"  => \$phred33,
	"phred64"  => \$phred64,
	"minsize:i"=> \$minsize,
	"cut-r1-head:i" => \$cuthead_r1,
	"cut-r1-tail:i" => \$cuttail_r1,
	"cut-r2-head:i" => \$cuthead_r2,
	"cut-r2-tail:i" => \$cuttail_r2,

	"minins:i" => \$minins,
	"maxins:i" => \$maxins,
	"CpH"      => \$call_CpH,

	"aligner:s"  => \$aligner,
	"align-only"=> \$alignonly,
	"keep-dup" => \$keepdup,
	"skip-bam" => \$skipBam,

	"help|h"    => \$help,
	"version|v" => \$showVer
);

if( $help ) {
	usage();
	exit 0;
}

if( $showVer ) {
	print "$version\n";
	exit 0;
}

## check parameters
if( check_parameters() ) {
	usage();
	exit 10;
}

## check dependent programs
our ($bowtie2, $bowtie2_ver, $hisat2, $hisat2_ver, $samtools, $R) = check_dependency();

## check whether the index is valid or not
my $TSSanno = check_index( $Msuite2, $index, $aligner );
print "\nINFO: Use Msuite2 root directory '$Msuite2'.\n";

#################################################################################
## prepare directories
$outdir = "$cwd/$outdir" unless $outdir =~ /^\//;

if( $phred33 ) {
	$minscore += 33;
} else {
	$minscore += 64;
}

# prepare makefile
my @tasks;
my $makefile = '';

# step 1: fastq trimming and alignment
my $Bowtie2Parameter = "-q --norc --ignore-quals --no-unal --no-head -p $thread --sam-no-qname-trunc";
#my $Hisat2Parameter  = "-q --norc --ignore-quals --no-unal --no-head -p $thread --no-spliced-alignment -k 1 --no-softclip";
my $Hisat2Parameter  = "-q --norc --ignore-quals --no-unal --no-head -p $thread --no-spliced-alignment -k 5";
## TODO: consider add "--dovetail" for bowtie2 if 5'-trimming is ON; hisat2 does not has this option
my $PEdataParameter  = "--minins $minins --maxins $maxins --no-mixed --no-discordant";
my $Msuite2Index     = "$Msuite2/index/$index/indices/$aligner";
my $RawGenome        = "$Msuite2/index/$index/fasta";
my $chrinfo          = "$Msuite2/index/$index/chr.info";

my $thread_lim = $thread;
$thread_lim = 8 if $thread_lim > 8;	## limit the preprocessing programs to at most 8 threads due to I/O consideration

prepare_directories();
my $cut_size  = $cuthead_r1 + $cuthead_r2;
my $max_cycle = $cycle - $cut_size;

################################### alignment ######################################
## deal with input files
if( $pe ) {	## paired-end data
	$reads = "$read1:$read2";
	$seqMode = 'pe';

	$read1 = join( ",", @file1s );
	$read2 = join( ",", @file2s );
	my $read1space = join( " ", @file1s );
	my $read2space = join( " ", @file2s );
	print "INFO: ", $#file1s+1, " paired files are specified as input in Paired-End mode.\n";
	$makefile .= "Msuite2.trim.log: $read1space $read2space #-@ $thread_lim\n" .
			"\t$bin/preprocessor.pe $read1 $read2 $cycle Msuite2 $alignmode $thread_lim $minsize $minscore $kit $cuthead_r1 $cuttail_r1 $cuthead_r2 $cuttail_r2\n\n";

	if( $aligner eq 'bowtie2' ) {
		$makefile .= "Msuite2.raw.log: Msuite2.trim.log #-@ $thread\n" .
				"\t$bowtie2 $Bowtie2Parameter $PEdataParameter -x $Msuite2Index/m$alignmode " .
				"-1 Msuite2.R1.fq -2 Msuite2.R2.fq -S Msuite2.raw.sam 2>Msuite2.raw.log && rm -f Msuite2.R*.fq\n";
	} else {
		$makefile .= "Msuite2.raw.log: Msuite2.trim.log #-@ $thread\n" .
				"\t$hisat2 $Hisat2Parameter $PEdataParameter -x $Msuite2Index/m$alignmode " .
				"-1 Msuite2.R1.fq -2 Msuite2.R2.fq -S Msuite2.raw.sam 2>Msuite2.raw.log && rm -f Msuite2.R*.fq\n";
	}

	$makefile .= "Msuite2.split.OK: Msuite2.raw.log #-@ $thread\n" .
			"\t$bin/T2C.pe.m$alignmode $chrinfo Msuite2.raw.sam per.chr $thread && touch Msuite2.split.OK && rm -f Msuite2.raw.sam\n\n";
} else {	# single-end data
	$reads = $read1;
	$seqMode = 'se';

	$read1 = join( ",", @file1s );
	my $read1space = join( " ", @file1s );
	print "INFO: ", $#file1s+1, " files are specified as input in Single-End mode.\n";
	$makefile .= "Msuite2.trim.log: $read1space #-@ $thread_lim\n" .
			"\t$bin/preprocessor.se $read1 /dev/null $cycle Msuite2 $alignmode $thread_lim $minsize $minscore $kit $cuthead_r1 $cuttail_r1\n\n";

	if( $aligner eq 'bowtie2' ) {
		$makefile .= "Msuite2.raw.log: Msuite2.trim.log #-@ $thread\n" .
				"\t$bowtie2 $Bowtie2Parameter -x $Msuite2Index/m$alignmode " .
				"-U Msuite2.R1.fq -S Msuite2.raw.sam 2>Msuite2.raw.log && rm -f Msuite2.R*.fq\n";
	} else {
		$makefile .= "Msuite2.raw.log: Msuite2.trim.log #-@ $thread\n" .
				"\t$hisat2 $Hisat2Parameter -x $Msuite2Index/m$alignmode " .
				"-U Msuite2.R1.fq -S Msuite2.raw.sam 2>Msuite2.raw.log && rm -f Msuite2.R*.fq\n";
	}

	$makefile .= "Msuite2.split.OK: Msuite2.raw.log #-@ $thread\n" .
			"\t$bin/T2C.se.m$alignmode $chrinfo Msuite2.raw.sam per.chr $thread && touch Msuite2.split.OK && rm -f Msuite2.raw.sam\n\n";
}

# step 2: remove duplicate && crick->watson && sam->bam conversion
mk_samheader( $chrinfo, $index, $protocol, $alignmode, $reads, "$outdir/per.chr/sam.header", $aligner);
makefile_perchr_v2( $bin, $samtools, $chrinfo, "sam.header", $seqMode, "$outdir/per.chr/makefile.align", $maxins, $thread, $keepdup, $skipBam );
$makefile .= "Msuite2.final.bam.bai: Msuite2.split.OK #-@ $thread\n\t\@cd per.chr; make -j $thread -f makefile.align; cd ../\n\n";
push @tasks, "Msuite2.final.bam.bai";

################################### methylation call ###############################
# step 3: methylation call && M-bias
unless( $alignonly ) {
	makefile_methcall( $bin, $chrinfo, $RawGenome, $seqMode, $protocol, $cycle, "$outdir/per.chr/makefile.CpG", "CpG", $outdir );
	$makefile .= "Msuite2.CpG.meth.call: Msuite2.final.bam.bai #-@ $thread\n" .
				 "\t\@cd per.chr; make -j $thread -f makefile.CpG; cd ../\n\n";
	push @tasks, "Msuite2.CpG.meth.call";

	$makefile .= "DNAm.per.chr.pdf: Msuite2.CpG.meth.call\n" .
				 "\t$R --slave --args Msuite2.CpG.meth.log $protocol DNAm.per.chr < $bin/plot.DNAm.per.chr.R\n\n";
	push @tasks, "DNAm.per.chr.pdf";

	$makefile .= "R1.w.mbias: Msuite2.CpG.meth.call\n" .
				 "\tperl $bin/merge.mbias.pl per.chr/chr*.R1.mbias > R1.w.mbias\n" .
				 "R1.c.mbias: Msuite2.CpG.meth.call\n" .
				 "\tperl $bin/merge.mbias.pl per.chr/rhr*.R1.mbias > R1.c.mbias\n" .
				 "R1.mbias.pdf: R1.w.mbias R1.c.mbias\n" .
				 "\t$R --slave --args R1.w.mbias R1.c.mbias $protocol R1.mbias $max_cycle < $bin/plot.mbias.R\n";
	push @tasks, "R1.mbias.pdf";

	if( $pe ) {
		$makefile .= "R2.w.mbias: Msuite2.CpG.meth.call\n" .
					 "\tperl $bin/merge.mbias.pl per.chr/chr*.R2.mbias > R2.w.mbias\n" .
					 "R2.c.mbias: Msuite2.CpG.meth.call\n" .
					 "\tperl $bin/merge.mbias.pl per.chr/rhr*.R2.mbias > R2.c.mbias\n" .
					 "R2.mbias.pdf: R2.w.mbias R2.c.mbias\n" .
					 "\t$R --slave --args R2.w.mbias R2.c.mbias $protocol R2.mbias $max_cycle < $bin/plot.mbias.R\n";
		push @tasks, "R2.mbias.pdf";
	}

	if( $call_CpH ) {
		makefile_methcall( $bin, $chrinfo, $RawGenome, $seqMode, $protocol, $cycle, "$outdir/per.chr/makefile.CpH", "CpH", $outdir);
		$makefile .= "Msuite2.CpH.meth.call: Msuite2.final.bam.bai #-@ $thread\n" .
					 "\t\@cd per.chr; make -j $thread -f makefile.CpH; cd ../\n\n";
		push @tasks, "Msuite2.CpH.meth.call";
	}

	## step 4: plot DNAm around TSS
	if( $TSSanno ) {
		my $TSS = "$Msuite2/index/$index/tss.ext.bed";
		$makefile .= "DNAm.around.TSS.stat: Msuite2.CpG.meth.call\n" .
					 "\t$bin/profile.DNAm.around.TSS $chrinfo Msuite2.CpG.meth.call $TSS $protocol > DNAm.around.TSS.stat\n" .
					 "DNAm.around.TSS.pdf: DNAm.around.TSS.stat\n" .
					 "\t$R --slave --args DNAm.around.TSS.stat DNAm.around.TSS < $bin/plot.DNAm.around.tss.R\n\n";
		push @tasks, "DNAm.around.TSS.pdf";
	}
} else {
	printYlw( "Warning: Align-only Mode is ON!" );
}

################################### statistics && plots ############################
# step 5: fastq statistics and base composition plot
$makefile .= "R1.fqstat.pdf: Msuite2.trim.log\n" .
			 "\t$R --slave --args R1.fqstat $cuthead_r1 $cuttail_r1 < $bin/plot.fqstat.R\n" .
			 "R1.trimmed.fqstat.pdf: Msuite2.trim.log\n" .
			 "\t$R --slave --args R1.trimmed.fqstat < $bin/plot.fqstat.R\n";
push @tasks, "R1.fqstat.pdf R1.trimmed.fqstat.pdf";
if( $pe ) {
	$makefile .= "R2.fqstat.pdf: Msuite2.trim.log\n" .
				 "\t$R --slave --args R2.fqstat $cuthead_r2 $cuttail_r2 < $bin/plot.fqstat.R\n" .
				 "R2.trimmed.fqstat.pdf: Msuite2.trim.log\n" .
				 "\t$R --slave --args R2.trimmed.fqstat < $bin/plot.fqstat.R\n";
	push @tasks, "R2.fqstat.pdf R2.trimmed.fqstat.pdf";

	$makefile .= "Msuite2.w.size: Msuite2.final.bam.bai\n" .
				 "\t$bin/merge.size.pl w per.chr/chr*.size\n" .
				 "Msuite2.c.size: Msuite2.final.bam.bai\n" .
				 "\t$bin/merge.size.pl c per.chr/rhr*.size\n" .
				 "Msuite2.size.pdf: Msuite2.w.size Msuite2.c.size\n" .
				 "\t$R --slave --args Msuite2.size Msuite2.w.size Msuite2.c.size $cut_size < $bin/plot.size.R\n" .
				 "Msuite2.lambda.size.pdf: Msuite2.w.size Msuite2.c.size\n" .
				 "\t$R --slave --args Msuite2.lambda.size Msuite2.w.lambda.size Msuite2.c.lambda.size $cut_size < $bin/plot.size.R\n" .
				 "Msuite2.pUC19.size.pdf: Msuite2.w.size Msuite2.c.size\n" .
				 "\t$R --slave --args Msuite2.pUC19.size Msuite2.w.pUC19.size Msuite2.c.pUC19.size $cut_size < $bin/plot.size.R\n";

	push @tasks, "Msuite2.size.pdf Msuite2.lambda.size.pdf Msuite2.pUC19.size.pdf";
}
$makefile .= "\n";

## step 6: generate final report
my $report = join(" ", "Msuite2.report/index.html:", @tasks) . "\n" .
			"\t[ -s R1.fqstat.png ] && mv *png Msuite2.report || echo \"Generating report\"\n" .
			"\tperl $bin/make.report.pl\n";

# write makefile
open  MK, ">$outdir/makefile" or die("$!");
print MK $report;
print MK $makefile;
print MK "\nclean:\n\t\@if [ -s \"Msuite2.report/index.html\" ];then rm -rf *fq *sam per.chr;else echo \"Error: it seems that the analysis has not finished yet.\";fi\n\n";
close MK;

print "\nMakefile successfully generated.\n",
	  "Now you can go to '$outdir' and run 'make' to perform the analysis.\n\n";

#################################### subroutines ###########################################
# prepare directories
sub prepare_directories {
	if( -d $outdir ) {
		printYlw( "WARNING: output directory '$outdir' EXISTS!" );
	} elsif( -s $outdir ) {
		printRed( "FATAL ERROR: output directory '$outdir' EXISTS and it is a FILE!" );
		exit 100;
	} else {
		system "mkdir -p $outdir/Msuite2.report/";
		system "mkdir -p $outdir/per.chr/";
	}

	## write configuration file
	open OUT, ">$outdir/Msuite2.conf" or die("$!");
	
	if( $pe ) {
		print OUT "Sequencing files\t$read1:$read2\n",
				  "Sequencing mode\tPaired-end\n";
	} else {
		print OUT "Sequencing files\t$read1\n",
				  "Sequencing mode\tSingle-end\n";
	}
	print OUT "Sequencing cycle\t$cycle\n",
			  "Library protocol\t$protocol\n",
			  "Genome index\t$index\n",
			  "Alignment mode\t$alignmode-letter\n";

	if( $phred33 ) {
		print OUT "Quality score system\tPhred33\n";
	} else {
		print OUT "Quality score system\tPhred64\n";
	}
	print OUT "Minimum score to keep cycle\t$minscore\n";

	print OUT "Cut Read 1 (head/tail)\t$cuthead_r1, $cuttail_r1\n",
			  "Cut Read 2 (head/tail)\t$cuthead_r2, $cuttail_r2\n";

	print OUT "Insert size range\t$minins-$maxins\n",
#			  "Minimum score to keep the alignment\t$minalign\n",	## these are hard-coded in the C++ programs
#			  "Minimum score to call methylation\t$minalign\n",
			  "Align-only mode\t", ($alignonly) ? 'On':'Off', "\n",
			  "Call CpH\t", ($call_CpH) ? 'Yes':'No', "\n";

	if( $aligner eq "bowtie2" ) {
		print OUT "Underline aligner\tBowtie2 (v$bowtie2_ver)\n";
	} else {
		print OUT "Underline aligner\tHisat2 (v$hisat2_ver)\n";
	}
	print OUT "Running thread\t$thread\n",
			  "Output directory\t$outdir\n",
			  "Msuite2 root\t$Msuite2\n";
	close OUT;
}

sub check_parameters {
	if( $mode3 && $mode4 ) {
		printRed( "Error: Both -3 and -4 are specified!" );
		return 1;
	} else {
		if( $mode4 ) {
			$alignmode = 4;
		} else {	## default
			$alignmode = 3;
		}
	}

	if( $phred33 && $phred64 ) {
		printRed( "Error: Both --phred33 and --phred64 are specified!" );
		return 1;
	} else {
		if( $phred64 ) {
			$phred64 = 1;
			$phred33 = 0;
		} else {	## default
			$phred64 = 0;
			$phred33 = 1;
		}
	}

	## check aligner
	if( $aligner ne 'bowtie2' && $aligner ne 'hisat2' ) {
		printRed( "Error: Unacceptable aligner parameter ($aligner)!" );
		return 1;
	}

	## check sequencing kit
	if( $kit =~ /^illumina$/i ) {
		$kit = "illumina";
	} elsif ( $kit =~ /^nextera$/i ) {
		$kit = "nextera";
	} elsif( $kit =~ /^bgi$/i ) {
		$kit = "bgi";
	} else {
		printRed( "Error: Unacceptable library preparation kit parameter!" );
		return 1;
	}

	if( $minins>$maxins || $maxins==0 ) {
		printRed( "Error: Unacceptable insert size range!" );
		return 1;
	}
	if( $readU ) {
		if( $read1 ) {
			printRed( "Error: Both -1 and -U are specified!" );
			return 1;
		}
		$read1 = $readU;
		if( $read2 ) {
			printRed( "Warning: -U is specified then -2 will be IGNORED!" );
			$read2 = '';
		}
	}

	unless( $read1 && $index && $outdir ) {
		printRed( "Fatal error: Missing key parameters!" );
		return 1;
	}

	## check protocol
	$protocol = uc $protocol;
	if( $protocol !~ /^TAPS$/i && $protocol !~ /^BS$/i ) {
		printRed( "Error: Unacceptable library protocol parameter!" );
		return 1;
	} else {
		if ( $protocol =~ /^BS$/i ) {	## for BS-seq, force to use 3-letter mode
#			print "INFO: The data is generated in BS-seq protocol.\n";
			if( $alignmode == 4 ) {
				$alignmode = 3;
				printYlw( "INFO: For BS-seq data, only 3-letter mode is valid ('-4' option will be ignored)." );
			}
		} else {
#			print "INFO: The data is generated in TAPS-like protocol.\n";
		}
	}

	## process input files
	$read1 =~ s/,+$//;
	$read1 =~ s/^,+//;
	## check whether '*' syntax is used in file names
	if( index($read1, '*') >= 0 ) {
		my $filelist = `ls $read1`;
		@file1s = split /\s+/, $filelist;
		$read1  = join(",", @file1s);
		printGrn("IMPORTANT INFORMATION: YOU USED '*' SYNTAX IN READ1, WHICH IS EXTRACTED AS:");
		printGrn( $read1 );
	} else {
		@file1s = split /,+/, $read1;
	}
	if( $#file1s < 0 ) {
		printRed( "Fatal error: Read1 does not contain any valid files!" );
		exit 10;
	}

	if( $read2 ) {	# paired-end data
		$pe = 'PE';
		print "INFO: The input reads will be processed in Paired-End mode.\n";
		$read2 =~ s/,+$//;
		$read2 =~ s/^,+//;
		if( index($read2, '*') >= 0 ) {
			my $filelist = `ls $read2`;
			@file2s = split /\s+/, $filelist;
			$read2  = join(",", @file2s);
			printGrn("IMPORTANT INFORMATION: YOU USED '*' SYNTAX IN READ2, WHICH IS EXTRACTED AS:");
			printGrn( $read2 );
		} else {
			@file2s = split /,+/, $read2;
		}

		if( $#file2s < 0 ) {
			printRed( "Fatal error: Read2 does not contain any valid files!" );
			exit 10;
		}
		if( $#file1s != $#file2s ) {
			printRed( "Fatal error: Read1 and Read2 do not contain the same amount of files!\n" );
			exit 11;
		}

		## check the cut parameter, PE-only
		if( $cuthead_r1 + $cuttail_r1 != $cuthead_r2 + $cuttail_r2 ) {
			printRed( "Error: incorrect cut head/tail parameters!" );
			exit 12;
		}
	} else {
		$pe = '';
		print "INFO: The input reads will be processed in Single-End mode.\n";
	}

	## change to absolute path
	for( my $i=0; $i<=$#file1s; ++$i ) {
		$file1s[$i] = "$cwd/$file1s[$i]" unless $file1s[$i] =~ /^\//;
		if( $pe ) {
			$file2s[$i] = "$cwd/$file2s[$i]" unless $file2s[$i] =~ /^\//;
		}
	}

	if( $cycle == 0 ) {	## detect the sequencing cycle
		$cycle = detect_cycle( $file1s[0] );
	} else {
		print "INFO: Sequencing cycle is set, only the first $cycle cycles will be analyzed.\n";
	}

	if( $thread == 0 ) {
		$thread = `grep processor /proc/cpuinfo | wc -l`;
		chomp( $thread );
		print "INFO: thread number is determined as $thread (auto-detected).\n";
	}

	return 0;
}

